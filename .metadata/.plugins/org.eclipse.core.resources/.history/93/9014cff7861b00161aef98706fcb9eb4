package testMine;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;


public abstract class Character
{
    // X/Y param
    // speed
    // x/y vel
    // health param

    // takeHit()
    // checkHealth()

    double x;// Note: x is column #

    double y;// y is row #

    double vX; // x velocity

    double vY;// y velocity

    protected int hp; // health points

    public World w;

    private boolean alive;

    private Color color;

    int speed = 200;
    
    Image img;

    /**
     * @param x
     *            x position
     * @param y
     *            y position
     * @param velX
     *            velocity x
     * @param velY
     *            velocity y
     * @param hitPoints
     *            hitPoints
     * @param world
     *            World
     */
    public Character( double x, double y, double velX, double velY, int hitPoints, Color c, World world )
    {
        this.x = x;
        this.y = y;
        vX = velX;
        vY = velY;
        hp = hitPoints;
        w = world;
        color = c;
        alive = true;
        
    }


    /**
     * TODO Write your method description here.
     * 
     * @return
     */
    public boolean isAlive()
    {
        return hp > 0;
    }


    public void setAlive( boolean newStatus )
    {
        alive = newStatus;
    }


    abstract void takeDamage( int damage );


    /**
     * Update characters's position.
     * 
     * @param dr
     *            change in y or row number
     * @param dc
     *            change in x or column number
     */
    public void updatePos( int dr, int dc )
    {
        // if ( y + dr >= 0 )
        // y = y + dr;
        // if ( x + dc >= 0 )
        // x = x + dc;
        vY = dr;
        vX = dc;
        if(alive)
        {
        if ( w.theWorld[(int)( x + dc )][(int)y].getTile().pass )
        {
            x = x + dc;
        }
        if ( w.theWorld[(int)( x )][(int)( y + dr )].getTile().pass )
        {
            y = y + dr;
        }
        }
    }


    // getters
    /**
     * Return the value of hp for this player.
     * 
     * @return
     */
    public int getHP()
    {
        return hp;
    }


    public void setHP( int newHP )
    {
        hp = newHP;
    }


    /**
     * Returns the value of velocity along the x axis.
     * 
     * @return velocity x
     */
    public double getVX()
    {
        return vX;
    }


    public void setVX( double newVX )
    {
        vX = newVX;
    }


    /**
     * Returns the value of velocity along the y axis.
     * 
     * @return velocity y
     */
    public double getVY()
    {
        return vY;
    }


    public void setVY( double newVY )
    {
        vY = newVY;
    }


    public double getX()
    {
        return x;
    }


    /**
     * 
     * Moves to x
     */
    public void setX( double toX )
    {
        x = toX;
    }


    public double getY()
    {
        return y;
    }


    /**
     * 
     * Move to y
     */
    public void setY( double toY )
    {
        y = toY;
    }


    public Color getColor()
    {
        return color;
    }


    public void setColor( Color x )
    {
        color = x;
    }
    
    public void setImage( Image i )
    {
        img = i;
    }
    public void drawMe(Graphics g)
    {
        if (img == null)
        {
            g.setColor( color );
            g.fillRect( (int)x * 20, (int)y * 20, 20, 20 );
        }
        else
        {
            g.drawImage( img, (int)x * 20, (int)y * 20, null );
        }
    }
}
